
const truffleAssert = require('truffle-assertions');
const expect = require('chai').expect;

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const contractVerifier = artifacts.require('Verifier');
const correctProofFile = require('../../zokrates/code/square/proof.json');
const incorrectProofFile = require('../../zokrates/code/square/bad-proof/proof.json');

// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps

contract('Verifier', accounts => {
    let contractInstance;

    before(async () => {
        contractInstance = await contractVerifier.new({ from: accounts[0] });
    });

    it('should verify with true with the proper proof values', async () => {
        console.log(correctProofFile);
        const { proof } = correctProofFile;
        const { a, b, c, inputs } = proof;
        console.log('a', a)
        const tx = await contractInstance.verifyTx(
            a,
            b,
            c,
            inputs,
        );

        truffleAssert.eventEmmitted(tx, 'Verified', (ev) => {
            return expect(ev.s).to.deep.equal('Transaction successfuly verified.');
        })
    });
});


// Test verification with incorrect proof
